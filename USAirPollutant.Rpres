<style>
.small-code pre code {
  font-size: 16px;
}
</style>

<style>
.reveal ul, 
.reveal ol {
    font-size: 28px;
}
</style>

<style>
.parag p {
    font-size: 28px;
}
</style>

<style>
.table p {
    font-size: 24px;
}
</style>

```{r, echo=FALSE}
library(knitr)
library(ggplot2)
```

A dashboard for analyzing US air pollutant emissions
================================================
author: E. Bertrand
date: 27th June 2016

<small>
Project assignment for "Developing Data Products" course
</small>

Why this solution?
========================================================
class: reveal

- The US Environmental Protection Agency (EPA) publishes a yearly, cumulative file with the emissions of seven key air pollutants (carbon monoxide, ammonia, oxides of nitrogen, etc.), organized by State and Tier 1 source categories (highway vehicles, fuel comb.industrial, wildfires, etc.).

- In order to analyze and compare basic trends of these pollutants in a visual way, an interactive dashboard has been developed, based on `shiny` technology:

    - It allows you to select dynamically the pollutant, the State, the range of years. Optionally, you can compare two different States.

    - It also allows you to split the data between the different sources for the purpose of understanding the reasons behind a trend.

- But before the EPA file can be used in the dashboard, it must be cleaned and reorganized (see next slide).


Cleaning and tidying the original data
======================================
class: table

- The original file has an untidy and complex structure: pollutants are in rows and years are in columns; too much details on source categories for a practical use in dashboards (Tier 1 has more than 15 levels); States names are abbreviated, etc. See a partial view of it (2 rows and 9 first colums):
<small>
```{r echo=FALSE}
emissions_raw <- readRDS("./data/emissions_raw.rds")
kable(emissions_raw[c(1,30), c(1:9)], digits = 3, format = "html",
      row.names = FALSE)
```
</small>
- As a part of the shiny application, there is a R script -based on `tidyr`, `dplyr` and `stringr` packages- that solves these problems, producing a tidy dataset with a simpler structure of sources.See a partial view of it (2 rows): <br/>
<small>
```{r echo=FALSE}
emissions <- readRDS("./data/emissions.rds")
kable(emissions[c(1,130), c(1:10)], digits = 4, format = "html",
      row.names = FALSE)
```
</small>


Dashboard value: answering key questions
========================================================
left: 40%
class: parag

This plot can be produced by the dashboard. It shows the evolution of PM25 emissions in California since 1996.

Why did it suddenly grow in 2008-2010?

<br/><br/>
We can see the answer with one of the plots the dashboard can create.

After splitting emissions by source, it is clear that the wave of forest fires on those years explains the abrupt increase.

***

```{r, echo=FALSE, fig.height=3.5, dpi=200}

state_list <- "California"
state_title <- paste("in", state_list)
emiss_data <- subset(emissions, state %in% state_list)
source_title <- ""
pollutant <- "PM25"
pollutant_data <- emiss_data[[pollutant]]

g <- ggplot(emiss_data, aes(x=year, y=pollutant_data)) +
                scale_x_continuous(name = "Year",
                                   breaks = seq(1996,2014,2),
                                   limits = c(1996, 2014)) +
                scale_y_continuous(name = paste(pollutant, "(1000 tons)"),
                                   limits = c(0, NA))
g <- g + stat_summary(color = "indianred2", fun.y = "sum", size = 1,
                                  geom = "line", na.rm = TRUE)

Title <- paste(pollutant, "emissions", state_title, source_title)

g <- g + ggtitle(Title) +
         theme(plot.title = element_text(size = 16, face = "bold",
                                                 margin = margin(5,0,15,0)),
               axis.title.x = element_text(size = 14, face = "bold",
                                                   margin = margin(15,0,5,0)),
               axis.title.y = element_text(size = 14, face = "bold",
                                                   margin = margin(0,15,0,0)),
               legend.text = element_text(size = 12))
print(g)

```

```{r, echo=FALSE, fig.height=3.5, dpi=200}

Source <- emiss_data$source
source_title <- "by source"

g <- ggplot(emiss_data, aes(x=year, y=pollutant_data)) +
                scale_x_continuous(name = "Year",
                                   breaks = seq(1996,2014,2),
                                   limits = c(1996, 2014)) +
                scale_y_continuous(name = paste(pollutant, "(1000 tons)"),
                                   limits = c(0, NA))

g <- g + stat_summary(aes(color = Source), fun.y = "sum", size = 1,
                             geom = "line", na.rm = TRUE)

Title <- paste(pollutant, "emissions", state_title, source_title)

g <- g + ggtitle(Title) +
         theme(plot.title = element_text(size = 16, face = "bold",
                                                 margin = margin(5,0,15,0)),
               axis.title.x = element_text(size = 14, face = "bold",
                                                   margin = margin(15,0,5,0)),
               axis.title.y = element_text(size = 14, face = "bold",
                                                   margin = margin(0,15,0,0)),
               legend.text = element_text(size = 12))
print(g)

```

References and links [*]
====================
<small>
- The EPA site with the data file and related documents is at <br/> https://www.epa.gov/air-emissions-inventories/air-pollutant-emissions-trends-data


- The R code that includes the tidying procedure over the original file is in <br/>
https://github.com/e-bertrand/Shiny_Dashboard/blob/master/LoadData.R


- The shiny dashboard (including related documentation with further details) can be accesed at https://e-bertrand.shinyapps.io/US_Air_Pollutants/

</small>
<small>
[*] It has been reported that some external links from RPubs do not work properly  (e.g. to github). You can bypass this problem clicking on the link with the right mouse-button, and choosing the "Open the link in a new window" option.
</small>
